#################################################
# MAINTAINED BY: SHIVAM
#################################################

name: CI PR
on:
  workflow_dispatch: 
  pull_request:  
    branches: 
      - main
      - dev
      - release/*
      - hotfix/*
      - fix/*

    paths-ignore: 
      - '.github/**'
      - 'README.md'
env:     
  IMAGE: pharmaco-temp
  IMAGE_PUSH: false
  DOCKERHUB_USERNAME: shiva9921 
  Turn_off_gate: false

jobs:
  build:
    permissions:
      contents: read 
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read 
    runs-on: ubuntu-latest

    steps:
      - name: code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: install dependencies
        run: |
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  

      - name: Linting
        if: env.Turn_off_gate != 'true'
        run: |
          pylint --output-format=json *.py > pylint_results.json || true
          pylint *.py | tail -n 2 >> pylint_results.json
          pylint *.py | tail -n 2 >> rating.txt

      - name: Code Quality Gate Check
        if: env.Turn_off_gate != 'true'
        id: parse_pylint
        run: |
          rating=$(tail -n 2 rating.txt | cut -d ":" -f 2 | cut -d "/" -f1 | cut -d "." -d ":" -f 2 | cut -d "/" -f1 | cut -d "." -f1)
          if (( $(echo "$rating >= 7" ) )); then
            echo -e "# Code Quality Gate🚀 \n ## Scanning summary\n Code Rating : ${rating}  Gate : Pass✅" >> $GITHUB_STEP_SUMMARY
          else
            echo -e "# Code Quality Gate\n ## Scanning summary\n Code Rating : ${rating}  Gate : Failed ❌" >> $GITHUB_STEP_SUMMARY
            echo "Pylint rating is less than 7.00. Exiting pipeline."
            exit 1
          fi
        

      - name: Upload Pylint results
        
        uses: actions/upload-artifact@v2
        if: always() &&  env.Turn_off_gate != 'true'
        with:
          name: pylint-results
          path: pylint_results.json
     
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    
      - name: Image Build
        run: |
          docker build -t ${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE}}:v1.${{github.run_number}} .
          echo -e "# Image Build👨‍🔧\n ## Version summary\n Image version : pharmaco:v1.${{github.run_number}}"  >> $GITHUB_STEP_SUMMARY

      - name: Image push
        if: env.IMAGE_PUSH != 'false'
        run: |
          docker push ${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE}}:v1.${{github.run_number}} 

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE}}:v1.${{github.run_number}}'
          format: 'sarif'
          output: 'trivy-results.sarif' 

      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy scan summary
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE}}:v1.${{github.run_number}}'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: result.txt 

      - name: scan summary
        run: |
          cat result.txt  >> $GITHUB_STEP_SUMMARY
